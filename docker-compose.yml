networks:
  internal:
    driver: bridge

services:
  patient-service-db:
    image: postgres:latest
    container_name: patient-service-db
    networks:
      - internal
    ports:
      - "5000:5432"
    environment:
      POSTGRES_USER: admin_user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db
    volumes:
      - C:/Users/sidme/db_volumes/patient-service-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin_user -d db"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  auth-service-db:
    image: postgres:latest
    container_name: auth-service-db
    networks:
      - internal
    ports:
      - "5001:5432"
    environment:
      POSTGRES_USER: admin_user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db
    volumes:
      - C:/Users/sidme/db_volumes/auth-service-db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin_user -d db" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  patient-service:
    build:
      context: ./patient-service
      dockerfile: Dockerfile
    image: patient-service:latest
    container_name: patient-service
    networks:
      - internal
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://patient-service-db:5432/db
      SPRING_DATASOURCE_USERNAME: admin_user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_SQL_INIT_MODE: always
      BILLING_SERVICE_ADDRESS: billing-service
      BILLING_SERVICE_GRPC_PORT: "9001"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
      MANAGEMENT_ENDPOINT_HEALTH_SHOW-DETAILS: always
    depends_on:
      patient-service-db:
        condition: service_healthy
      billing-service:
        condition: service_started
      kafka:
        condition: service_healthy

  billing-service:
    build:
      context: ./billing-service
      dockerfile: Dockerfile
    image: billing-service:latest
    container_name: billing-service
    networks:
      - internal
    ports:
      - "4001:4001"
      - "9001:9001"

  kafka:
    image: bitnami/kafka:latest  # Added image
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
    networks:
      - internal
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - internal
    depends_on:
      kafka:
        condition: service_healthy

  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
    image: analytics-service:latest
    container_name: analytics-service
    networks:
      - internal
    ports:
      - "4002:4002"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    image: api-gateway:latest
    container_name: api-gateway
    networks:
      - internal
    ports:
      - "4004:4004"
    environment:
      AUTH_SERVICE_URL: http://auth-service:4005

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    image: auth-service:latest
    container_name: auth-service
    networks:
      - internal
    environment:
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_DATASOURCE_URL: jdbc:postgresql://auth-service-db:5432/db
      SPRING_DATASOURCE_USERNAME: admin_user
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_SQL_INIT_MODE: always
      JWT_SECRET: 5k6uTyolAIdz8zEpdjUzQuXPYC3NqOCIHzrY5pdgbN3eCqrWSPjIdn14bPxTII8N
    depends_on:
      auth-service-db:
          condition: service_healthy
